{"version":3,"file":"index.js","sources":["../../index.js"],"sourcesContent":["import Phaser from \"phaser\";\nimport io from \"socket.io-client\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super({key: \"GameScene\"});\n    this.socket = null;\n    this.player = null;\n    this.playerBody = null; // Физическое тело игрока\n    this.otherPlayers = new Map();\n    this.foods = new Map();\n    this.foodGroup = null; // Физическая группа для еды\n    this.eatenFood = new Set(); // Механизм для предотвращения мерцания\n    this.camera = null;\n    this.gameWidth = 5000;\n    this.gameHeight = 5000;\n    this.targetPosition = {x: 0, y: 0};\n    this.lerpSpeed = 0.08; // Уменьшаем для более плавной интерполяции\n    this.lastPositionUpdate = 0;\n    this.positionUpdateInterval = 50; // Отправлять позицию каждые 50мс\n  }\n\n  preload() {\n    // Загрузка не требуется\n  }\n\n  create() {\n    this.socket = io();\n    this.camera = this.cameras.main;\n    this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\n    this.cameras.main.setBackgroundColor(\"#1a1a2e\");\n\n    // Set physics world bounds to match game world\n    this.physics.world.setBounds(0, 0, this.gameWidth, this.gameHeight);\n\n    // Create a texture for the food\n    const foodGraphics = this.make.graphics();\n    foodGraphics.fillStyle(0x00ff00);\n    foodGraphics.fillCircle(5, 5, 5);\n    foodGraphics.generateTexture('food', 10, 10);\n    foodGraphics.destroy();\n\n    this.foodGroup = this.physics.add.group();\n\n    this.socket.on(\"gameState\", (data) => {\n      this.gameWidth = data.gameWidth;\n      this.gameHeight = data.gameHeight;\n      this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\n      this.physics.world.setBounds(0, 0, this.gameWidth, this.gameHeight);\n\n      this.createPlayer(data.player);\n\n      this.physics.add.overlap(this.playerBody, this.foodGroup, this.eatFood, null, this);\n\n      data.players.forEach((playerData) => {\n        if (playerData.id !== this.socket.id) {\n          this.createOtherPlayer(playerData);\n        }\n      });\n\n      data.foods.forEach((foodData) => {\n        this.createFood(foodData);\n      });\n\n      // Столкновения теперь обрабатываются через обновление состояния игры\n\n      this.centerCameraOnPlayer();\n    });\n\n    this.socket.on(\"gameUpdate\", (data) => {\n      this.updatePlayers(data.players);\n      // Еда теперь управляется сервером, чтобы избежать рассинхронизации\n      this.updateFoods(data.foods);\n    });\n\n    this.socket.on(\"playerJoined\", (playerData) => {\n      if (playerData.id !== this.socket.id) {\n        this.createOtherPlayer(playerData);\n      }\n      this.updatePlayersCount();\n    });\n\n    this.socket.on(\"playerLeft\", (playerId) => {\n      this.removeOtherPlayer(playerId);\n      this.updatePlayersCount();\n    });\n\n    this.socket.on(\"foodEaten\", (foodId) => {\n      this.removeFood(foodId);\n    });\n\n    this.socket.on(\"foodCreated\", (foodData) => {\n      this.createFood(foodData);\n    });\n\n    this.input.on(\"pointermove\", (pointer) => {\n      if (this.playerBody) {\n        const worldPoint = this.camera.getWorldPoint(pointer.x, pointer.y);\n        this.targetPosition.x = worldPoint.x;\n        this.targetPosition.y = worldPoint.y;\n      }\n    });\n\n    this.updateScore();\n    this.updatePlayersCount();\n  }\n\n  update(time, delta) {\n    if (this.playerBody) {\n      const distance = Phaser.Math.Distance.Between(\n        this.playerBody.x,\n        this.playerBody.y,\n        this.targetPosition.x,\n        this.targetPosition.y,\n      );\n\n      if (distance < 1) {\n        this.playerBody.body.setVelocity(0);\n      } else {\n        const angle = Phaser.Math.Angle.Between(\n          this.playerBody.x,\n          this.playerBody.y,\n          this.targetPosition.x,\n          this.targetPosition.y,\n        );\n        const speed = 200 / (this.player.radius / 20);\n        this.physics.velocityFromRotation(angle, speed, this.playerBody.body.velocity);\n      }\n\n      this.player.x = this.playerBody.x;\n      this.player.y = this.playerBody.y;\n\n      // Отправляем позицию на сервер с ограничением частоты\n      if (time - this.lastPositionUpdate > this.positionUpdateInterval) {\n        this.socket.emit(\"playerMove\", {x: this.player.x, y: this.player.y});\n        this.lastPositionUpdate = time;\n      }\n\n      // Обновляем цель камеры\n      this.centerCameraOnPlayer();\n    }\n\n    // Интерполяция других игроков\n    this.interpolateOtherPlayers();\n  }\n\n\n  centerCameraOnPlayer() {\n    if (this.playerBody) {\n      this.camera.centerOn(this.playerBody.x, this.playerBody.y);\n    }\n  }\n\n  createPlayer(playerData) {\n    this.player = playerData;\n    this.targetPosition = {x: this.player.x, y: this.player.y};\n\n    const playerGraphics = this.add.graphics({x: this.player.x, y: this.player.y});\n    playerGraphics.lineStyle(2, 0x000000, 1); // Четкая черная обводка\n    playerGraphics.fillStyle(Phaser.Display.Color.HexStringToColor(this.player.color).color);\n    playerGraphics.fillCircle(0, 0, this.player.radius);\n    playerGraphics.strokeCircle(0, 0, this.player.radius);\n\n    this.physics.world.enable(playerGraphics);\n    // Устанавливаем круглый якорь и корректное смещение\n    playerGraphics.body.setCircle(\n      this.player.radius,\n      -this.player.radius,\n      -this.player.radius,\n    );\n    playerGraphics.body.setCollideWorldBounds(true);\n\n    this.playerBody = playerGraphics;\n    this.player.graphics = playerGraphics;\n  }\n\n  createOtherPlayer(playerData) {\n    const graphics = this.add.graphics({x: playerData.x, y: playerData.y});\n    graphics.lineStyle(2, 0x000000, 1); // Четкая черная обводка\n    graphics.fillStyle(Phaser.Display.Color.HexStringToColor(playerData.color).color);\n    graphics.fillCircle(0, 0, playerData.radius);\n    graphics.strokeCircle(0, 0, playerData.radius);\n\n    this.otherPlayers.set(playerData.id, {\n      ...playerData,\n      graphics: graphics,\n      lerpPosition: {x: playerData.x, y: playerData.y},\n    });\n  }\n\n  removeOtherPlayer(playerId) {\n    const player = this.otherPlayers.get(playerId);\n    if (player) {\n      player.graphics.destroy();\n      this.otherPlayers.delete(playerId);\n    }\n  }\n\n  createFood(foodData) {\n    if (this.foods.has(foodData.id)) return;\n\n    const food = this.foodGroup.create(foodData.x, foodData.y, 'food');\n    food.setData('id', foodData.id);\n    const scale = foodData.radius / 5;\n    food.setScale(scale);\n    food.body.setCircle(5);\n    \n    this.foods.set(foodData.id, food);\n  }\n\n  eatFood(player, food) {\n    if (!food.active) {\n      return;\n    }\n    const foodId = food.getData('id');\n    if (foodId) {\n      this.eatenFood.add(foodId);\n      this.socket.emit('eatFood', foodId);\n      this.removeFood(foodId);\n\n      this.time.delayedCall(1000, () => {\n        this.eatenFood.delete(foodId);\n      });\n    }\n  }\n\n  removeFood(foodId) {\n    const food = this.foods.get(foodId);\n    if (food) {\n      this.foodGroup.remove(food, true, true);\n      this.foods.delete(foodId);\n    }\n  }\n\n  updateFoods(foodsData) {\n    const serverFoodIds = new Set(foodsData.map(f => f.id));\n\n    // Добавляем новую еду\n    foodsData.forEach(foodData => {\n      if (!this.foods.has(foodData.id) && !this.eatenFood.has(foodData.id)) {\n        this.createFood(foodData);\n      }\n    });\n\n    // Удаляем съеденную еду\n    this.foods.forEach((food, foodId) => {\n      if (!serverFoodIds.has(foodId)) {\n        this.removeFood(foodId);\n      }\n    });\n  }\n\n\n  updatePlayers(playersData) {\n    const serverPlayerIds = new Set();\n    playersData.forEach((playerData) => {\n      serverPlayerIds.add(playerData.id);\n\n      if (playerData.id === this.socket.id) {\n        const radiusChanged = this.player.radius !== playerData.radius;\n        const scoreChanged = this.player.score !== playerData.score;\n\n        this.player.radius = playerData.radius;\n        this.player.score = playerData.score;\n\n        if (radiusChanged) {\n          // Обновляем физическое тело\n          this.playerBody.body.setCircle(this.player.radius, -this.player.radius, -this.player.radius);\n\n          // Перерисовываем игрока с четкими контурами\n          this.player.graphics.clear();\n          this.player.graphics.lineStyle(2, 0x000000, 1);\n          this.player.graphics.fillStyle(Phaser.Display.Color.HexStringToColor(this.player.color).color);\n          this.player.graphics.fillCircle(0, 0, this.player.radius);\n          this.player.graphics.strokeCircle(0, 0, this.player.radius);\n        }\n        \n        if (scoreChanged || radiusChanged) {\n            this.updateScore();\n        }\n      } else {\n        let otherPlayer = this.otherPlayers.get(playerData.id);\n        if (otherPlayer) {\n          // Обновляем позицию других игроков с сервера\n          otherPlayer.x = playerData.x;\n          otherPlayer.y = playerData.y;\n\n          if (otherPlayer.radius !== playerData.radius) {\n            otherPlayer.radius = playerData.radius;\n            // Перерисовываем с четкими контурами\n            otherPlayer.graphics.clear();\n            otherPlayer.graphics.lineStyle(2, 0x000000, 1);\n            otherPlayer.graphics.fillStyle(Phaser.Display.Color.HexStringToColor(playerData.color).color);\n            otherPlayer.graphics.fillCircle(0, 0, playerData.radius);\n            otherPlayer.graphics.strokeCircle(0, 0, playerData.radius);\n          }\n        } else {\n          this.createOtherPlayer(playerData);\n        }\n      }\n    });\n\n    this.otherPlayers.forEach((player, playerId) => {\n      if (!serverPlayerIds.has(playerId)) {\n        this.removeOtherPlayer(playerId);\n      }\n    });\n  }\n\n  interpolateOtherPlayers() {\n    this.otherPlayers.forEach((player) => {\n      player.lerpPosition.x = Phaser.Math.Linear(player.lerpPosition.x, player.x, this.lerpSpeed);\n      player.lerpPosition.y = Phaser.Math.Linear(player.lerpPosition.y, player.y, this.lerpSpeed);\n      player.graphics.setPosition(player.lerpPosition.x, player.lerpPosition.y);\n    });\n  }\n\n  updateScore() {\n    if (this.player) {\n      document.getElementById(\"score\").textContent = `Score: ${this.player.score} | Size: ${Math.round(this.player.radius)}`;\n    }\n  }\n\n  updatePlayersCount() {\n    const count = this.otherPlayers.size + (this.player ? 1 : 0);\n    document.getElementById(\"players\").textContent = `Players: ${count}`;\n  }\n}\n\nconst config = {\n  type: Phaser.AUTO,\n  width: window.innerWidth,\n  height: window.innerHeight,\n  parent: \"gameContainer\",\n  scene: GameScene,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: {y: 0},\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n  },\n};\n\nconst game = new Phaser.Game(config);\n\nwindow.addEventListener(\"resize\", () => {\n  game.scale.resize(window.innerWidth, window.innerHeight);\n});"],"names":["io"],"mappings":"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"}