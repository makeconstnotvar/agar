{"version":3,"file":"index.js","sources":["../../index.js"],"sourcesContent":["import Phaser from \"phaser\";\nimport io from \"socket.io-client\";\n\nclass GameScene extends Phaser.Scene {\n  constructor() {\n    super({ key: \"GameScene\" });\n    this.socket = null;\n    this.player = null;\n    this.otherPlayers = new Map();\n    this.foods = new Map();\n    this.camera = null;\n    this.gameWidth = 5000;\n    this.gameHeight = 5000;\n    this.targetPosition = { x: 0, y: 0 };\n  }\n\n  preload() {\n    // Загрузка не требуется, так как рисуем примитивы\n  }\n\n  create() {\n    // Подключение к серверу\n    this.socket = io();\n\n    // Создание камеры\n    this.camera = this.cameras.main;\n    this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\n\n    // Установка белого фона для отладки\n    this.cameras.main.setBackgroundColor(\"#1a1a2e\");\n\n    // Обработка начального состояния игры\n    this.socket.on(\"gameState\", (data) => {\n      console.log(\"Received game state:\", data);\n      this.player = data.player;\n      this.targetPosition.x = this.player.x;\n      this.targetPosition.y = this.player.y;\n      this.gameWidth = data.gameWidth;\n      this.gameHeight = data.gameHeight;\n      this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\n\n      // Создание графики для основного игрока\n      this.player.graphics = this.add.graphics();\n      console.log(\"Created player graphics\");\n\n      // Создание других игроков\n      data.players.forEach((playerData) => {\n        if (playerData.id !== this.player.id) {\n          this.createOtherPlayer(playerData);\n        }\n      });\n\n      // Создание еды\n      data.foods.forEach((foodData) => {\n        this.createFood(foodData);\n      });\n\n      console.log(\n        `Created ${data.players.length} players and ${data.foods.length} foods`,\n      );\n\n      // Центрирование камеры на игроке\n      this.centerCameraOnPlayer();\n    });\n\n    // Обработка обновлений игры\n    this.socket.on(\"gameUpdate\", (data) => {\n      this.updatePlayers(data.players);\n    });\n\n    // Обработка подключения нового игрока\n    this.socket.on(\"playerJoined\", (playerData) => {\n      this.createOtherPlayer(playerData);\n      this.updatePlayersCount();\n    });\n\n    // Обработка отключения игрока\n    this.socket.on(\"playerLeft\", (playerId) => {\n      this.removeOtherPlayer(playerId);\n      this.updatePlayersCount();\n    });\n\n    // Обработка поглощения еды\n    this.socket.on(\"foodEaten\", (data) => {\n      this.removeFood(data.foodId);\n      this.createFood(data.newFood);\n      if (data.playerId === this.player.id) {\n        this.updateScore();\n      }\n    });\n\n    // Обработка ввода\n    this.input.on(\"pointermove\", (pointer) => {\n      if (this.player) {\n        const worldPoint = this.camera.getWorldPoint(pointer.x, pointer.y);\n        this.targetPosition.x = worldPoint.x;\n        this.targetPosition.y = worldPoint.y;\n      }\n    });\n\n    // Инициализация UI\n    this.updateScore();\n    this.updatePlayersCount();\n  }\n\n  update() {\n    if (this.player && this.player.graphics) {\n      this.socket.emit(\"playerMove\", {\n        x: this.targetPosition.x,\n        y: this.targetPosition.y,\n      });\n\n      // Обновление позиции и размера графики игрока\n      this.player.graphics.clear();\n      this.player.graphics.fillStyle(\n        Phaser.Display.Color.HexStringToColor(this.player.color).color,\n      );\n      this.player.graphics.fillCircle(\n        this.player.x,\n        this.player.y,\n        this.player.radius,\n      );\n\n      this.centerCameraOnPlayer();\n      this.updateScore();\n    } else {\n      console.log(\"Update: player or player.graphics is null\");\n    }\n  }\n\n  centerCameraOnPlayer() {\n    if (this.player) {\n      this.camera.centerOn(this.player.x, this.player.y);\n    }\n  }\n\n  createOtherPlayer(playerData) {\n    console.log(\"Creating other player:\", playerData.id);\n    const graphics = this.add.graphics({ x: playerData.x, y: playerData.y });\n    graphics.fillStyle(\n      Phaser.Display.Color.HexStringToColor(playerData.color).color,\n    );\n    graphics.fillCircle(0, 0, playerData.radius);\n\n    this.otherPlayers.set(playerData.id, {\n      graphics: graphics,\n      data: playerData,\n    });\n  }\n\n  removeOtherPlayer(playerId) {\n    const player = this.otherPlayers.get(playerId);\n    if (player) {\n      player.graphics.destroy();\n      this.otherPlayers.delete(playerId);\n    }\n  }\n\n  createFood(foodData) {\n    console.log(\"Creating food:\", foodData.id);\n    const graphics = this.add.graphics({ x: foodData.x, y: foodData.y });\n    graphics.fillStyle(\n      Phaser.Display.Color.HexStringToColor(foodData.color).color,\n    );\n    graphics.fillCircle(0, 0, foodData.radius);\n\n    this.foods.set(foodData.id, {\n      graphics: graphics,\n      data: foodData,\n    });\n  }\n\n  removeFood(foodId) {\n    const food = this.foods.get(foodId);\n    if (food) {\n      food.graphics.destroy();\n      this.foods.delete(foodId);\n    }\n  }\n\n  updatePlayers(playersData) {\n    // Обновление данных игрока\n    const currentPlayerData = playersData.find((p) => p.id === this.player.id);\n    if (currentPlayerData) {\n      if (!this.player.graphics) {\n        // Создание графики для основного игрока, если ее нет\n        this.player.graphics = this.add.graphics();\n      }\n      this.player = { ...this.player, ...currentPlayerData };\n    }\n\n    // Обновление других игроков\n    playersData.forEach((playerData) => {\n      if (playerData.id !== this.player.id) {\n        const existingPlayer = this.otherPlayers.get(playerData.id);\n        if (existingPlayer) {\n          existingPlayer.data = playerData;\n          // Обновление графики игрока\n          existingPlayer.graphics.clear();\n          existingPlayer.graphics.fillStyle(\n            Phaser.Display.Color.HexStringToColor(playerData.color).color,\n          );\n          existingPlayer.graphics.fillCircle(0, 0, playerData.radius);\n          existingPlayer.graphics.x = playerData.x;\n          existingPlayer.graphics.y = playerData.y;\n        } else {\n          this.createOtherPlayer(playerData);\n        }\n      }\n    });\n\n    // Удаление отключившихся игроков\n    const currentPlayerIds = new Set(playersData.map((p) => p.id));\n    for (let [playerId] of this.otherPlayers) {\n      if (!currentPlayerIds.has(playerId)) {\n        this.removeOtherPlayer(playerId);\n      }\n    }\n  }\n\n  updateFoods(foodsData) {\n    const currentFoodIds = new Set(foodsData.map((f) => f.id));\n\n    // Удаление отсутствующей еды\n    for (let [foodId] of this.foods) {\n      if (!currentFoodIds.has(foodId)) {\n        this.removeFood(foodId);\n      }\n    }\n\n    // Обновление существующей и добавление новой еды\n    foodsData.forEach((foodData) => {\n      const existingFood = this.foods.get(foodData.id);\n      if (existingFood) {\n        // Обновление графики еды\n        existingFood.graphics.clear();\n        existingFood.graphics.fillStyle(\n          Phaser.Display.Color.HexStringToColor(foodData.color).color,\n        );\n        existingFood.graphics.fillCircle(0, 0, foodData.radius);\n        existingFood.graphics.x = foodData.x;\n        existingFood.graphics.y = foodData.y;\n      } else {\n        this.createFood(foodData);\n      }\n    });\n  }\n\n  updatePlayerGraphics() {}\n\n  updateScore() {\n    if (this.player) {\n      document.getElementById(\"score\").textContent =\n        `Score: ${this.player.score} | Size: ${Math.round(this.player.radius)}`;\n    }\n  }\n\n  updatePlayersCount() {\n    const count = this.otherPlayers.size + 1;\n    document.getElementById(\"players\").textContent = `Players: ${count}`;\n  }\n}\n\nconst config = {\n  type: Phaser.AUTO,\n  width: window.innerWidth,\n  height: window.innerHeight,\n  parent: \"gameContainer\",\n  scene: GameScene,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { y: 0 },\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n  },\n};\n\nconst game = new Phaser.Game(config);\n\n// Обработка изменения размера окна\nwindow.addEventListener(\"resize\", () => {\n  game.scale.resize(window.innerWidth, window.innerHeight);\n});\n"],"names":["io"],"mappings":"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"}