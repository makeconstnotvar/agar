{"version":3,"file":"index.js","sources":["../../index.js"],"sourcesContent":["import Phaser from \"phaser\";\r\nimport io from \"socket.io-client\";\r\n\r\nclass GameScene extends Phaser.Scene {\r\n  constructor() {\r\n    super({ key: \"GameScene\" });\r\n    this.socket = null;\r\n    this.player = null;\r\n    this.playerBody = null; // Физическое тело игрока\r\n    this.otherPlayers = new Map();\r\n    this.foods = new Map();\r\n    this.foodGroup = null; // Физическая группа для еды\r\n    this.camera = null;\r\n    this.gameWidth = 5000;\r\n    this.gameHeight = 5000;\r\n    this.targetPosition = { x: 0, y: 0 };\r\n    this.lerpSpeed = 0.2; // Увеличим скорость для более плавной интерполяции\r\n  }\r\n\r\n  preload() {\r\n    // Загрузка не требуется\r\n  }\r\n\r\n  create() {\r\n    this.socket = io();\r\n    this.camera = this.cameras.main;\r\n    this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\r\n    this.cameras.main.setBackgroundColor(\"#1a1a2e\");\r\n\r\n    // Set physics world bounds to match game world\r\n    this.physics.world.setBounds(0, 0, this.gameWidth, this.gameHeight);\r\n\r\n    this.socket.on(\"gameState\", (data) => {\r\n      this.gameWidth = data.gameWidth;\r\n      this.gameHeight = data.gameHeight;\r\n      this.camera.setBounds(0, 0, this.gameWidth, this.gameHeight);\r\n      this.physics.world.setBounds(0, 0, this.gameWidth, this.gameHeight);\r\n\r\n      this.createPlayer(data.player);\r\n\r\n      data.players.forEach((playerData) => {\r\n        if (playerData.id !== this.socket.id) {\r\n          this.createOtherPlayer(playerData);\r\n        }\r\n      });\r\n\r\n      data.foods.forEach((foodData) => {\r\n        this.createFood(foodData);\r\n      });\r\n\r\n      // Столкновения теперь обрабатываются через обновление состояния игры\r\n\r\n      this.centerCameraOnPlayer();\r\n    });\r\n\r\n    this.socket.on(\"gameUpdate\", (data) => {\r\n      this.updatePlayers(data.players);\r\n      // Еда теперь управляется сервером, чтобы избежать рассинхронизации\r\n      this.updateFoods(data.foods);\r\n    });\r\n\r\n    this.socket.on(\"playerJoined\", (playerData) => {\r\n      if (playerData.id !== this.socket.id) {\r\n        this.createOtherPlayer(playerData);\r\n      }\r\n      this.updatePlayersCount();\r\n    });\r\n\r\n    this.socket.on(\"playerLeft\", (playerId) => {\r\n      this.removeOtherPlayer(playerId);\r\n      this.updatePlayersCount();\r\n    });\r\n    \r\n    this.socket.on(\"foodEaten\", (foodId) => {\r\n        this.removeFood(foodId);\r\n    });\r\n\r\n    this.socket.on(\"foodCreated\", (foodData) => {\r\n        this.createFood(foodData);\r\n    });\r\n\r\n    this.input.on(\"pointermove\", (pointer) => {\r\n      if (this.playerBody) {\r\n        const worldPoint = this.camera.getWorldPoint(pointer.x, pointer.y);\r\n        this.targetPosition.x = worldPoint.x;\r\n        this.targetPosition.y = worldPoint.y;\r\n      }\r\n    });\r\n\r\n    this.updateScore();\r\n    this.updatePlayersCount();\r\n  }\r\n\r\n  update() {\r\n    if (this.playerBody) {\r\n      const speed = 200 / (this.player.radius / 20);\r\n      this.physics.moveTo(\r\n        this.playerBody,\r\n        this.targetPosition.x,\r\n        this.targetPosition.y,\r\n        speed,\r\n      );\r\n\r\n      this.player.x = this.playerBody.x;\r\n      this.player.y = this.playerBody.y;\r\n\r\n      this.socket.emit(\"playerMove\", { x: this.player.x, y: this.player.y });\r\n      this.centerCameraOnPlayer();\r\n    }\r\n    this.interpolateOtherPlayers();\r\n  }\r\n  \r\n\r\n  centerCameraOnPlayer() {\r\n    if (this.playerBody) {\r\n      this.camera.centerOn(this.playerBody.x, this.playerBody.y);\r\n    }\r\n  }\r\n\r\n  createPlayer(playerData) {\r\n    this.player = playerData;\r\n    this.targetPosition = { x: this.player.x, y: this.player.y };\r\n\r\n    const playerGraphics = this.add.graphics({ x: this.player.x, y: this.player.y });\r\n    playerGraphics.lineStyle(2, 0x000000, 1); // Четкая черная обводка\r\n    playerGraphics.fillStyle(Phaser.Display.Color.HexStringToColor(this.player.color).color);\r\n    playerGraphics.fillCircle(0, 0, this.player.radius);\r\n    playerGraphics.strokeCircle(0, 0, this.player.radius);\r\n\r\n    this.physics.world.enable(playerGraphics);\r\n    // Устанавливаем круглый якорь и корректное смещение\r\n    playerGraphics.body.setCircle(\r\n      this.player.radius,\r\n      -this.player.radius,\r\n      -this.player.radius,\r\n    );\r\n    playerGraphics.body.setCollideWorldBounds(true);\r\n\r\n    this.playerBody = playerGraphics;\r\n    this.player.graphics = playerGraphics;\r\n  }\r\n\r\n  createOtherPlayer(playerData) {\r\n    const graphics = this.add.graphics({ x: playerData.x, y: playerData.y });\r\n    graphics.lineStyle(2, 0x000000, 1); // Четкая черная обводка\r\n    graphics.fillStyle(Phaser.Display.Color.HexStringToColor(playerData.color).color);\r\n    graphics.fillCircle(0, 0, playerData.radius);\r\n    graphics.strokeCircle(0, 0, playerData.radius);\r\n\r\n    this.otherPlayers.set(playerData.id, {\r\n      ...playerData,\r\n      graphics: graphics,\r\n      lerpPosition: { x: playerData.x, y: playerData.y },\r\n    });\r\n  }\r\n\r\n  removeOtherPlayer(playerId) {\r\n    const player = this.otherPlayers.get(playerId);\r\n    if (player) {\r\n      player.graphics.destroy();\r\n      this.otherPlayers.delete(playerId);\r\n    }\r\n  }\r\n\r\n  createFood(foodData) {\r\n    if (this.foods.has(foodData.id)) return;\r\n\r\n    // Создаем графику с четкими контурами\r\n    const graphics = this.add.graphics({ x: foodData.x, y: foodData.y });\r\n    graphics.lineStyle(1, 0x000000, 1); // Четкая черная обводка\r\n    graphics.fillStyle(Phaser.Display.Color.HexStringToColor(foodData.color).color);\r\n    graphics.fillCircle(0, 0, foodData.radius);\r\n    graphics.strokeCircle(0, 0, foodData.radius);\r\n\r\n    // Включаем физику для графики\r\n    this.physics.world.enable(graphics);\r\n    graphics.body.setCircle(foodData.radius);\r\n    graphics.body.setCollideWorldBounds(true);\r\n\r\n    this.foods.set(foodData.id, graphics);\r\n  }\r\n\r\n  removeFood(foodId) {\r\n    const food = this.foods.get(foodId);\r\n    if (food) {\r\n      food.destroy();\r\n      this.foods.delete(foodId);\r\n    }\r\n  }\r\n  \r\n  updateFoods(foodsData) {\r\n    const serverFoodIds = new Set(foodsData.map(f => f.id));\r\n    \r\n    // Добавляем новую еду\r\n    foodsData.forEach(foodData => {\r\n        if (!this.foods.has(foodData.id)) {\r\n            this.createFood(foodData);\r\n        }\r\n    });\r\n\r\n    // Удаляем съеденную еду\r\n    this.foods.forEach(food => {\r\n        if (!serverFoodIds.has(food.name)) {\r\n            this.removeFood(food.name);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n  updatePlayers(playersData) {\r\n     const serverPlayerIds = new Set();\r\n     playersData.forEach((playerData) => {\r\n        serverPlayerIds.add(playerData.id);\r\n\r\n        if (playerData.id === this.socket.id) {\r\n            // Обновляем только данные, не позицию\r\n            if (this.player.radius !== playerData.radius) {\r\n                this.player.radius = playerData.radius;\r\n                this.player.score = playerData.score;\r\n\r\n                this.playerBody.body.setCircle(this.player.radius, -this.player.radius, -this.player.radius);\r\n\r\n                // Перерисовываем игрока с четкими контурами\r\n                this.player.graphics.clear();\r\n                this.player.graphics.lineStyle(2, 0x000000, 1);\r\n                this.player.graphics.fillStyle(Phaser.Display.Color.HexStringToColor(this.player.color).color);\r\n                this.player.graphics.fillCircle(0, 0, this.player.radius);\r\n                this.player.graphics.strokeCircle(0, 0, this.player.radius);\r\n                this.updateScore();\r\n            }\r\n        } else {\r\n            let otherPlayer = this.otherPlayers.get(playerData.id);\r\n            if (otherPlayer) {\r\n                otherPlayer.x = playerData.x;\r\n                otherPlayer.y = playerData.y;\r\n\r\n                if (otherPlayer.radius !== playerData.radius) {\r\n                    otherPlayer.radius = playerData.radius;\r\n                    // Перерисовываем с четкими контурами\r\n                    otherPlayer.graphics.clear();\r\n                    otherPlayer.graphics.lineStyle(2, 0x000000, 1);\r\n                    otherPlayer.graphics.fillStyle(Phaser.Display.Color.HexStringToColor(playerData.color).color);\r\n                    otherPlayer.graphics.fillCircle(0, 0, playerData.radius);\r\n                    otherPlayer.graphics.strokeCircle(0, 0, playerData.radius);\r\n                }\r\n            } else {\r\n                this.createOtherPlayer(playerData);\r\n            }\r\n        }\r\n    });\r\n    \r\n    this.otherPlayers.forEach((player, playerId) => {\r\n        if (!serverPlayerIds.has(playerId)) {\r\n            this.removeOtherPlayer(playerId);\r\n        }\r\n    });\r\n  }\r\n  \r\n  interpolateOtherPlayers() {\r\n     this.otherPlayers.forEach((player) => {\r\n        player.lerpPosition.x = Phaser.Math.Linear(player.lerpPosition.x, player.x, this.lerpSpeed);\r\n        player.lerpPosition.y = Phaser.Math.Linear(player.lerpPosition.y, player.y, this.lerpSpeed);\r\n        player.graphics.setPosition(player.lerpPosition.x, player.lerpPosition.y);\r\n    });\r\n  }\r\n\r\n  updateScore() {\r\n    if (this.player) {\r\n      document.getElementById(\"score\").textContent = `Score: ${this.player.score} | Size: ${Math.round(this.player.radius)}`;\r\n    }\r\n  }\r\n\r\n  updatePlayersCount() {\r\n    const count = this.otherPlayers.size + (this.player ? 1 : 0);\r\n    document.getElementById(\"players\").textContent = `Players: ${count}`;\r\n  }\r\n}\r\n\r\nconst config = {\r\n  type: Phaser.AUTO,\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n  parent: \"gameContainer\",\r\n  scene: GameScene,\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      gravity: { y: 0 },\r\n      debug: false,\r\n    },\r\n  },\r\n  scale: {\r\n    mode: Phaser.Scale.RESIZE,\r\n    autoCenter: Phaser.Scale.CENTER_BOTH,\r\n  },\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n  game.scale.resize(window.innerWidth, window.innerHeight);\r\n});\r\n"],"names":["io"],"mappings":"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"}